package com.example.myxlab.gdktry;

import com.example.myxlab.gdktry.ar.SimpleCameraActivity;
import com.google.android.glass.media.Sounds;
import com.google.android.glass.view.WindowUtils;
import com.google.android.glass.widget.CardBuilder;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.media.AudioManager;
import android.os.Bundle;
import android.speech.RecognizerIntent;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;

import java.util.ArrayList;
import java.util.List;

/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 *
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class MainActivity extends Activity {

    private CardBuilder card;

    /**
     * {@link CardScrollView} to use as the main content view.
     */
    private CardScrollView mCardScroller;

    /**
     * "Hello World!" {@link View} generated by {@link #()}.
     */
    private View mView;

    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);

        getWindow().requestFeature(WindowUtils.FEATURE_VOICE_COMMANDS);

        mView = buildView();

        mCardScroller = new CardScrollView(this);
        mCardScroller.setAdapter(new CardScrollAdapter() {
            @Override
            public int getCount() {
                return 1;
            }

            @Override
            public Object getItem(int position) {
                return mView;
            }

            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                return mView;
            }

            @Override
            public int getPosition(Object item) {
                if (mView.equals(item)) {
                    return 0;
                }
                return AdapterView.INVALID_POSITION;
            }
        });

        // Handle the TAP event.
        mCardScroller.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                // Plays disallowed sound to indicate that TAP actions are not supported.
                AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
                am.playSoundEffect(Sounds.DISALLOWED);
                card.setText("ABC");
                Intent i = new Intent(MainActivity.this, SimpleCameraActivity.class);
                startActivity(i);
            }
        });

        setContentView(mCardScroller);
    }

    @Override
    protected void onResume() {
        super.onResume();
        mCardScroller.activate();
    }

    @Override
    protected void onPause() {
        mCardScroller.deactivate();
        super.onPause();
    }

    /**
     * Builds a Glass styled "Hello World!" view using the {@link CardBuilder} class.
     */

    private View buildView( ) {
        //1
        card = new CardBuilder(this, CardBuilder.Layout.TEXT);

       /* card.setText("Hello World");
        return card.getView();*/

        // 2
        DataManager dataManager = new DataManager(getBaseContext());
        ArrayList<String> strings = dataManager.getStoredStrings();

        // 3
        StringBuilder builder = new StringBuilder();
        if (strings.size() == 0) {
            builder.append("No Items!");

            // 4
        } else {
            for (String s : strings) {
                builder.append("- ").append(s).append("\n");
            }
        }

        // 5
        card.setText(builder.toString());
        return card.getView();
    }

    @Override
    public boolean onCreatePanelMenu(int featureId, Menu menu) {
        if (featureId == WindowUtils.FEATURE_VOICE_COMMANDS){
            getMenuInflater().inflate(R.menu.activity_menu, menu);
            Log.e("onCreatePanelMenu","onCreatePanelMenu");
            return true;
        }
        return super.onCreatePanelMenu(featureId, menu);
    }


    @Override
    public boolean onMenuItemSelected(int featureId, MenuItem item) {
        // 1
        Log.e("onMenuItemSelected",item.getTitle().toString());
        card.setText("Noo");
        if (featureId == WindowUtils.FEATURE_VOICE_COMMANDS) {
            // 2
            Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
            // 3
            Log.e("onMenuItemSelected","onMenuItemSelected");
            startActivityForResult(intent, item.getItemId());
            //card.setText(item.getTitle());
            return true;
        }
        return super.onMenuItemSelected(featureId, item);
    }


   /* First, you check to make sure that the feature ID is for voice commands – this means the menu item was selected from the “OK Glass” menu.

    When the voice commands are called, this finds out what you want the app to do. If the user wants to add an item, you need to find out what that item is! In order to do this, you create an Intent.
    This Intent, when started, shows the “Speak your message” screen with the microphone on the right side, a screen most Glass users know well. After the user dictates the item they want to add (or remove), you’re able to use the transcribed text in your app.

    Depending on the action you need to call when the intent is completed, you need to pass a different constant.

    When the intent completes, it gives you back the constant you pass in; from there, you can act according to which action you originally intended.

    But you’ve already thought of this! The way you set up activity_menu.xml has already defined a unique constant for each action. This item ID is attached to the MenuItem parameter in the method. You launch the intent using startActivityForResult, and pass the MenuItem’s ID as the second parameter.

    If the feature isn’t for voice commands, then it is best practice to pass on the method call to the superclass.*/

    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == R.id.add_menu_item && resultCode == RESULT_OK) {
            // 1
            //Part A
            List<String> results = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);
            String spokenText = results.get(0);

            //Part B
            DataManager dataManager = new DataManager(getBaseContext());
            ArrayList<String> storedStrings = dataManager.getStoredStrings();
            storedStrings.add(spokenText);
            dataManager.setStoredStrings(storedStrings);

            //Part C
            mView = buildView();
            mCardScroller.getAdapter().notifyDataSetChanged();
        } else if (requestCode == R.id.remove_menu_item && resultCode == RESULT_OK) {
            // 2
            List<String> results = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);
            String spokenText = results.get(0);
            DataManager dataManager = new DataManager(getBaseContext());
            List<String> storedStrings = dataManager.getStoredStrings();
            if (storedStrings.contains(spokenText)){
                storedStrings.remove(spokenText);
                dataManager.setStoredStrings(new ArrayList<String>(storedStrings));
            }
            mView = buildView();
            mCardScroller.getAdapter().notifyDataSetChanged();
        }
        super.onActivityResult(requestCode, resultCode, data);
    }

}
